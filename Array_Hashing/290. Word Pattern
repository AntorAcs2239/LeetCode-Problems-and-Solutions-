class Solution {
public:
    bool wordPattern(string pattern, string s) {
        unordered_map<char,string>mp;
        unordered_map<string,char>mp2;
        vector<string>vec;
        string tem;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]==' ')
            {
                if(tem.size()>0)
                {
                    vec.push_back(tem);
                    tem.clear();
                }
            }
            else tem+=s[i];
        }
        if(tem.size()>0)
        {
            vec.push_back(tem);
        }
        cout<<vec.size()<<endl;
        if(vec.size()==pattern.size())
        {
            for(int i=0;i<vec.size();i++)
            {
                if(mp.find(pattern[i])!=mp.end())
                {
                    string t=mp[pattern[i]];
                    if(t!=vec[i])return false;
                }
                if(mp2.find(vec[i])!=mp2.end())
                {
                    char ch=mp2[vec[i]];
                    if(pattern[i]!=ch)return false;
                }
                mp[pattern[i]]=vec[i];
                mp2[vec[i]]=pattern[i];
            }
            return true;
        }
        return false;
    }
};