/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<TreeNode*>q;
        vector<vector<int>>ans;
        if(root==NULL)return ans;
        q.push_back(root);
        int i=0;
        while(1)
        {
            bool flag=true;
            vector<TreeNode*>tem;
            vector<int>t;
            for(auto x:q)
            {
                flag=false;
            t.push_back(x->val);
            if(x->left)tem.push_back(x->left);
            if(x->right)tem.push_back(x->right);
            }
            if(flag)break;
            ans.push_back(t);
            q.clear();
            q=tem;
        }
        return ans;
    }
};
//Best Approach(With help of others)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL)return ans;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            int n=q.size();
            vector<int>tem;
            while(n--)
            {
                auto f=q.front();
                q.pop();
                tem.push_back(f->val);
                if(f->left)q.push(f->left);
                if(f->right)q.push(f->right);
            }
            ans.push_back(tem);
        }
        return ans;
    }
};