/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int>vec;
        inorder(root,vec);
        return vec[k-1];
    }
    void inorder(TreeNode* root,vector<int>&vec)
    {
        if(root==NULL)return;
        inorder(root->left,vec);
        vec.push_back(root->val);
        inorder(root->right,vec);
    }
};
//Beautiful Approach(With the help of others)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int s=0;
int ans;
    int kthSmallest(TreeNode* root, int k) {
       findd(root,k);
       return ans;
    }
    void findd(TreeNode* root,int k)
    {
        if(root==NULL)return;
        findd(root->left,k);
        s++;
        if(s==k)
        {
            ans=root->val;
            return;
        }
        findd(root->right,k);
    }
};