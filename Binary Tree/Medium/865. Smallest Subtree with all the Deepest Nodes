//C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        vector<TreeNode*>vec;
        vector<TreeNode*>q;
        q.push_back(root);
        while(q.size()>0)
        {
            vec=q;
            vector<TreeNode*>tem;
            for(int i=0;i<q.size();i++)
            {
                if(q[i]->left!=NULL)tem.push_back(q[i]->left);
                if(q[i]->right)tem.push_back(q[i]->right);
            }
            q.clear();
            q=tem;
        }
        vector<TreeNode*>ans;
        findans(root,0,vec,ans);
        return ans[0];
    }
    int findans(TreeNode* root,int count,vector<TreeNode*>vec,vector<TreeNode*>&ans)
    {
        if(root==NULL)return 0;
        if(find(vec.begin(),vec.end(),root)!=vec.end())
        {
            count++;
        }
        count+=findans(root->left,count,vec,ans)+findans(root->right,count,vec,ans);
        if(count==vec.size())
        {
            ans.push_back(root);
        }
        return count;
    }
};