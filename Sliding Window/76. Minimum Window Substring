class Solution {
public:
    string minWindow(string s, string t) {
        if(s.size()<t.size())
        {
            return "";
        }
        unordered_map<char,int>mp;
        int n1=s.size();
        int n2=t.size();
        for(int i=0;i<n2;i++)mp[t[i]]++;
        int start=0,end=0,d=INT_MAX,l=-1,r=-1;
        int count=0;
        for(;end<n1;end++)
        {
            if(mp[s[end]]>0)
            {
                count++;
            }
            mp[s[end]]--;
            if(count==t.size())
            {
                while(start<end&&mp[s[start]]<0)
                {
                    mp[s[start]]++;
                    start++;
                }
                if(end-start+1<d)
                {
                    d=end-start+1;
                    l=start;
                    r=end;
                }
                mp[s[start]]++;
                start++;
                count--;
            }
        }
        if(l==-1)return "";
        string tem="";
        for(int i=l;i<=r;i++)tem+=s[i];
        return tem;
    }
};

#Approach:(Collected)

Check if s is shorter than t. If it is, there is no possible solution, and we return an empty string.
Create a frequency map of characters in t.
Initialize count, start, min_length, and min_start to 0.
Traverse the string s using the end pointer.
If the current character in s is present in the frequency map, increment the count.
Decrement the frequency of the current character in the frequency map.
If the count equals the length of t, it means we have found a window that contains all characters of t. Now we try to shrink the window by moving the start pointer forward until the window still contains all the characters of t.
If the length of the current window is smaller than the minimum length so far, update the minimum length and the minimum start.
Increment the frequency of the character at the start pointer and decrement the count.
Return the minimum window or an empty string if no window exists.