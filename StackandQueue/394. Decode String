class Solution {
public:
    string decodeString(string s) {
        stack<string>st;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='[')st.push("[");
            else if(s[i]==']')
            {
                string tem;
                while(!st.empty()&&st.top()!="[")
                {
                    string tem2=st.top();
                    reverse(tem2.begin(),tem2.end());
                    tem+=tem2;
                    st.pop();
                }
                reverse(tem.begin(),tem.end());
                st.pop();
                string x=st.top();
                st.pop();
                int a=stoi(x);
                x=tem;
                cout<<tem<<endl;
                for(int j=1;j<a;j++)
                {
                    tem+=x;
                }
                st.push(tem);
            }
           else if(s[i]>='0'&&s[i]<='9')
           {
               string tem;
               while(s[i]>='0'&&s[i]<='9')
               {
                   tem+=s[i];
                   i++;
               }
               i--;
               st.push(tem);
           }
           else 
           {
               string tem;
               while(s[i]>='a'&&s[i]<='z')
               {
                   tem+=s[i];
                   i++;
               }
               i--;
               st.push(tem);
           }
        }
        string ans;
        while(!st.empty())
        {
            string tem=st.top();
            //cout<<tem<<endl;
            reverse(tem.begin(),tem.end());
            ans+=tem;
            st.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
//Approach similar to Infix to postfix